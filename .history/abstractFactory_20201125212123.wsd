@startuml af

  interface AbstractFactory{
    +createProductA(): AbstractProductA
    +createProductB(): AbstractProductB
  }

  class ConcreteFactory1{
    +createProductA(): AbstractProductA
    +createProductB(): AbstractProductB
  }

  class ConcreteFactory2{
    +createProductA(): AbstractProductA
    +createProductB(): AbstractProductB
  }

  interface AbstractProductA{
    +usefulFunctionA(): string
  }

  class ConcreteProductA1{
    +usefulFunctionA(): string
  }

  class ConcreteProductA2{
    +usefulFunctionA(): string
  }

  interface AbstractProductB{
    +usefulFunctionB(): string
    +anotherUsefulFunctionB(collaborator: AbstractProductA): string
  }

  class ConcreteProductB1{
    +usefulFunctionB(): string
    +anotherUsefulFunctionB(collaborator: AbstractProductA): string
  }

  class ConcreteProductB2{
    +usefulFunctionB(): string
    +anotherUsefulFunctionB(collaborator: AbstractProductA): string
  }

  AbstractFactory <|-- ConcreteFactory1 
  AbstractFactory <|-- ConcreteFactory2 
  AbstractProductA <|-- ConcreteProductA1 
  AbstractProductA <|-- ConcreteProductA2 
  AbstractProductB <|-- ConcreteProductB1 
  AbstractProductB <|-- ConcreteProductB2 

@enduml