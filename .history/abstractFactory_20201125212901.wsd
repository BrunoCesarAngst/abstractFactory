@startuml af

'
' A interface Abstract Factory declara um conjunto de métodos que retornam
' diferentes produtos abstratos. Esses produtos são chamados de família e são
' relacionado por um tema ou conceito de alto nível. Produtos de uma família geralmente são
' capazes de colaborar entre si. Uma família de produtos pode ter vários
' variantes, mas os produtos de uma variante são incompatíveis com produtos de
' outro.

  interface AbstractFactory{
    +createProductA(): AbstractProductA
    +createProductB(): AbstractProductB
  }
  
  

  class ConcreteFactory1{
    +createProductA(): AbstractProductA
    +createProductB(): AbstractProductB
  }

  class ConcreteFactory2{
    +createProductA(): AbstractProductA
    +createProductB(): AbstractProductB
  }

  interface AbstractProductA{
    +usefulFunctionA(): string
  }

  class ConcreteProductA1{
    +usefulFunctionA(): string
  }

  class ConcreteProductA2{
    +usefulFunctionA(): string
  }

  interface AbstractProductB{
    +usefulFunctionB(): string
    +anotherUsefulFunctionB(collaborator: AbstractProductA): string
  }

  class ConcreteProductB1{
    +usefulFunctionB(): string
    +anotherUsefulFunctionB(collaborator: AbstractProductA): string
  }

  class ConcreteProductB2{
    +usefulFunctionB(): string
    +anotherUsefulFunctionB(collaborator: AbstractProductA): string
  }

  AbstractFactory <|-- ConcreteFactory1 : generalização
  AbstractFactory <|-- ConcreteFactory2 : generalização
  AbstractProductA <|-- ConcreteProductA1 : generalização
  AbstractProductA <|-- ConcreteProductA2 : generalização
  AbstractProductB <|-- ConcreteProductB1 : generalização
  AbstractProductB <|-- ConcreteProductB2 : generalização

@enduml